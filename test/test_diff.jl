using MacroModelling
import ForwardDiff as ‚Ñ±
using SparseArrays
import LinearAlgebra as ‚Ñí
using ComponentArrays
using LinearMaps
import IterativeSolvers as ‚Ñê
import RecursiveFactorization as RF

@model RBC begin
    1  /  c[0] = (0.95 /  c[1]) * (Œ± * exp(z[1]) * k[0]^(Œ± - 1) + (1 - Œ¥))
    c[0] + k[0] = (1 - Œ¥) * k[-1] + exp(z[0]) * k[-1]^Œ±
    z[0] = 0.2 * z[-1] + 0.01 * eps_z[x]
end

@parameters RBC begin
    Œ¥ = 0.02
    Œ± = 0.5
end

get_SS(RBC)

get_irf(RBC, algorithm = :third_order)

function diff_sol(parameters,ùìÇ)
    SS_and_pars, solution_error = ùìÇ.SS_solve_func(parameters, ùìÇ, false, false)
        
    ‚àá‚ÇÅ = calculate_jacobian(parameters, SS_and_pars, ùìÇ)

    ùë∫‚ÇÅ = calculate_first_order_solution(‚àá‚ÇÅ; T = ùìÇ.timings)

    ‚àá‚ÇÇ = calculate_hessian(parameters, SS_and_pars, ùìÇ)

    ùêí‚ÇÇ = calculate_second_order_solution(‚àá‚ÇÅ, ‚àá‚ÇÇ, ùë∫‚ÇÅ; T = ùìÇ.timings)

    ‚àá‚ÇÉ = calculate_third_order_derivatives(parameters, SS_and_pars, ùìÇ)
            
    ùêí‚ÇÉ = calculate_third_order_solution(‚àá‚ÇÅ, 
                                        ‚àá‚ÇÇ, 
                                        ‚àá‚ÇÉ, 
                                        ùë∫‚ÇÅ, 
                                        ùêí‚ÇÇ; 
                                        T = ùìÇ.timings)
end




diff_sol(RBC.parameter_values,RBC)

fd_jac = ‚Ñ±.jacobian(x -> diff_sol(x,RBC), Float64.(RBC.parameter_values))

using FiniteDifferences

fin_grad = FiniteDifferences.jacobian(central_fdm(4,1),x -> diff_sol(x,RBC), Float64.(RBC.parameter_values))[1]

Matrix(fd_jac)


function solve_sylvester_equation_condition(ABCX, S)
    (; A, B, C, X) = ABCX

    X + A * S - B * S * C
end


function solve_sylvester_equation(ABCX::AbstractArray{Float64})
    (; A, B, C, X) = ABCX

    lm = LinearMap{Float64}(x -> A * reshape(x, size(X)) - B * reshape(x, size(X)) * C, size(X)[1] * size(X)[2])

    sparse(reshape(‚Ñê.gmres(lm, vec(-X)), size(X)))
end


function solve_sylvester_equation(ABCX::AbstractArray{‚Ñ±.Dual{Z,S,N}}) where {Z,S,N}
    # unpack: AoS -> SoA
    abcx = ‚Ñ±.value.(ABCX)

    # you can play with the dimension here, sometimes it makes sense to transpose
    ps = mapreduce(‚Ñ±.partials, hcat, ABCX)'

    # get f(vs)
    val = solve_sylvester_equation(abcx)

    # get J(f, vs) * ps (cheating). Write your custom rule here
    B = ‚Ñ±.jacobian(x -> solve_sylvester_equation_condition(x, val), abcx)
    A = ‚Ñ±.jacobian(x -> solve_sylvester_equation_condition(abcx, x), val)
    
    AÃÇ = RF.lu(A, check = false)

    if !‚Ñí.issuccess(AÃÇ)
        AÃÇ = ‚Ñí.svd(A)
    end
    
    jvp = -(AÃÇ \ B) * ps

    # lm = LinearMap{Float64}(x -> A * reshape(x, size(B)), length(B))

    # jvp = - sparse(reshape(‚Ñê.gmres(lm, sparsevec(B)), size(B))) * ps
    # println(jvp)
    # jvp *= -ps

    # pack: SoA -> AoS
    return reshape(map(val, eachrow(jvp)) do v, p
        ‚Ñ±.Dual{Z}(v, p...) # Z is the tag
    end,size(val))
end


function diff_sol(parameters,ùìÇ)
    SS_and_pars, solution_error = ùìÇ.SS_solve_func(parameters, ùìÇ, false, false)
        
    ‚àá‚ÇÅ = calculate_jacobian(parameters, SS_and_pars, ùìÇ)

    ùë∫‚ÇÅ = calculate_first_order_solution(‚àá‚ÇÅ; T = ùìÇ.timings)

    ‚àá‚ÇÇ = calculate_hessian(parameters,SS_and_pars,ùìÇ)

    T = ùìÇ.timings

    tol = 1e-12
    # Indices and number of variables
    i‚Çä = T.future_not_past_and_mixed_idx;
    i‚Çã = T.past_not_future_and_mixed_idx;

    n‚Çã = T.nPast_not_future_and_mixed
    n‚Çä = T.nFuture_not_past_and_mixed
    n‚Çë = T.nExo;
    n  = T.nVars
    n‚Çë‚Çã = n‚Çã + 1 + n‚Çë

    # 1st order solution
    ùêí‚ÇÅ = @views [ùë∫‚ÇÅ[:,1:n‚Çã] zeros(n) ùë∫‚ÇÅ[:,n‚Çã+1:end]] |> sparse
    droptol!(ùêí‚ÇÅ,tol)

    # set up vector to capture volatility effect
    redu = sparsevec(n‚Çë‚Çã - n‚Çë + 1:n‚Çë‚Çã, 1)
    redu_idxs = findnz(‚Ñí.kron(redu, redu))[1]
    ùõî = @views sparse(redu_idxs[Int.(range(1,n‚Çë^2,n‚Çë))], fill(n‚Çã * (n‚Çë‚Çã + 1) + 1, n‚Çë), 1, n‚Çë‚Çã^2, n‚Çë‚Çã^2)

    ùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë = @views [ùêí‚ÇÅ[i‚Çã,:]; zeros(n‚Çë + 1, n‚Çã) spdiagm(ones(n‚Çë + 1))[1,:] zeros(n‚Çë + 1, n‚Çë)];
    
    ‚é∏ùêí‚ÇÅùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë‚éπ‚ï±ùêí‚ÇÅ‚ï±ùüè‚Çë‚Çã = @views [(ùêí‚ÇÅ * ùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë)[i‚Çä,:]
                                ùêí‚ÇÅ
                                spdiagm(ones(n‚Çë‚Çã))[[range(1,n‚Çã)...,n‚Çã + 1 .+ range(1,n‚Çë)...],:]];

    ùêí‚ÇÅ‚Çä‚ï±ùüé = @views [ùêí‚ÇÅ[i‚Çä,:]
                    zeros(n‚Çã + n + n‚Çë, n‚Çë‚Çã)];

    # setup compression matrices
    colls2 = [n‚Çë‚Çã * (i-1) + k for i in 1:n‚Çë‚Çã for k in 1:i]
    ùêÇ‚ÇÇ = sparse(colls2, 1:length(colls2) , 1)
    ùêî‚ÇÇ = ùêÇ‚ÇÇ' * sparse([i <= k ? (k - 1) * n‚Çë‚Çã + i : (i - 1) * n‚Çë‚Çã + k for k in 1:n‚Çë‚Çã for i in 1:n‚Çë‚Çã], 1:n‚Çë‚Çã^2, 1)

    ‚àá‚ÇÅ‚Çäùêí‚ÇÅ‚ûï‚àá‚ÇÅ‚ÇÄ = @views -‚àá‚ÇÅ[:,1:n‚Çä] * ùêí‚ÇÅ[i‚Çä,1:n‚Çã] * ‚Ñí.diagm(ones(n))[i‚Çã,:] - ‚àá‚ÇÅ[:,range(1,n) .+ n‚Çä]

    ‚àá‚ÇÇ‚é∏k‚é∏ùêí‚ÇÅùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë‚éπ‚ï±ùêí‚ÇÅ‚ï±ùüè‚Çë‚Çã‚ûïùõîkùêí‚ÇÅ‚Çä‚ï±ùüé‚éπ = -‚àá‚ÇÇ * sparse(‚Ñí.kron(‚é∏ùêí‚ÇÅùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë‚éπ‚ï±ùêí‚ÇÅ‚ï±ùüè‚Çë‚Çã, ‚é∏ùêí‚ÇÅùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë‚éπ‚ï±ùêí‚ÇÅ‚ï±ùüè‚Çë‚Çã) + ‚Ñí.kron(ùêí‚ÇÅ‚Çä‚ï±ùüé, ùêí‚ÇÅ‚Çä‚ï±ùüé) * ùõî) * ùêÇ‚ÇÇ 

    X = sparse(‚àá‚ÇÅ‚Çäùêí‚ÇÅ‚ûï‚àá‚ÇÅ‚ÇÄ \ ‚àá‚ÇÇ‚é∏k‚é∏ùêí‚ÇÅùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë‚éπ‚ï±ùêí‚ÇÅ‚ï±ùüè‚Çë‚Çã‚ûïùõîkùêí‚ÇÅ‚Çä‚ï±ùüé‚éπ)
    droptol!(X,tol)

    ‚àá‚ÇÅ‚Çä = @views sparse(‚àá‚ÇÅ[:,1:n‚Çä] * spdiagm(ones(n))[i‚Çä,:])

    B = sparse(‚àá‚ÇÅ‚Çäùêí‚ÇÅ‚ûï‚àá‚ÇÅ‚ÇÄ \ ‚àá‚ÇÅ‚Çä)
    droptol!(B,tol)

    C = (ùêî‚ÇÇ * ‚Ñí.kron(ùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë, ùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë) + ùêî‚ÇÇ * ùõî) * ùêÇ‚ÇÇ
    droptol!(C,tol)

    A = spdiagm(ones(n))

    ùêí‚ÇÇ = solve_sylvester_equation(ComponentArray(;A,B,C,X))
end




RBC.model_hessian
diff_sol(RBC.parameter_values,RBC)

fd_jac = ‚Ñ±.jacobian(x -> diff_sol(x,RBC), Float64.(RBC.parameter_values))

using FiniteDifferences

fin_grad = FiniteDifferences.jacobian(central_fdm(4,1),x -> diff_sol(x,RBC), Float64.(RBC.parameter_values))[1]


A = [0.1677860968109567 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.8322139031890433 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; -1.0801285648555996 0.0 0.0 0.8260486345791883 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.0801285648555996 0.0 0.0 0.17395136542081166 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; -1.4018964501149391 0.0 0.0 -0.45154217675686387 0.0 0.0 0.9636402643409201 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.4018964501149391 0.0 0.0 0.45154217675686387 0.0 0.0 0.036359735659079934 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.09100660852300191 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.9089933914769981 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9089933914769981 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9089933914769981 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; -0.05400642824277999 0.0 0.0 -0.008697568271040582 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.05400642824277999 0.0 0.0 0.008697568271040582 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; -0.07009482250574697 0.0 0.0 -0.022577108837843196 0.0 0.0 -0.0018179867829539963 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.07009482250574697 0.0 0.0 0.022577108837843196 0.0 0.0 0.0018179867829539963 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; -0.0035047411252873495 0.0 0.0 -0.0011288554418921598 0.0 0.0 -9.089933914769982e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0; 0.0035047411252873495 0.0 0.0 0.0011288554418921598 0.0 0.0 9.089933914769982e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]

b = [-0.0003710833394972135 0.0 0.0 -0.0003952301172749097 0.0 0.0 0.0 0.0 0.0 0.0003397392294234469 0.0 0.0 0.00036184641344946355 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 -0.0003710833394972135 0.0 0.0 -0.0003952301172749097 0.0 0.0 0.0 0.0 0.0 0.0003397392294234469 0.0 0.0 0.00036184641344946355 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -0.0003710833394972135 0.0 0.0 -0.0003952301172749097 0.0 0.0 0.0 0.0 0.0 0.0003397392294234469 0.0 0.0 0.00036184641344946355 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0010260945261167489 0.0 0.0 0.013500221263356928 0.0 0.0 0.0 0.0 0.0 0.00024458612477134303 0.0 0.0 -0.0021138575933560863 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0010260945261167489 0.0 0.0 0.013500221263356928 0.0 0.0 0.0 0.0 0.0 0.00024458612477134303 0.0 0.0 -0.0021138575933560863 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0010260945261167489 0.0 0.0 0.013500221263356928 0.0 0.0 0.0 0.0 0.0 0.00024458612477134303 0.0 0.0 -0.0021138575933560863 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.02506164029515263 0.0 0.0 0.25030067854542737 0.0 0.0 0.0 0.0 0.0 -0.0009398738911287602 0.0 0.0 -0.01610871348687895 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.02506164029515263 0.0 0.0 0.25030067854542737 0.0 0.0 0.0 0.0 0.0 -0.0009398738911287602 0.0 0.0 -0.01610871348687895 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.02506164029515263 0.0 0.0 0.25030067854542737 0.0 0.0 0.0 0.0 0.0 -0.0009398738911287602 0.0 0.0 -0.01610871348687895 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.00015649809625454245 0.0 0.0 -0.00015649809625454245 0.0 0.0 0.0 0.0 0.0 -0.00021915219699242413 0.0 0.0 -0.0004692536001090257 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.00015649809625454245 0.0 0.0 -0.00015649809625454245 0.0 0.0 0.0 0.0 0.0 -0.00021915219699242413 0.0 0.0 -0.0004692536001090257 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.00015649809625454245 0.0 0.0 -0.00015649809625454245 0.0 0.0 0.0 0.0 0.0 -0.00021915219699242413 0.0 0.0 -0.0004692536001090257 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 5.130472630583767e-5 0.0 0.0 0.0006750110631678464 0.0 0.0 0.0 0.0 0.0 1.222930623856716e-5 0.0 0.0 -0.0001056928796678043 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 5.130472630583767e-5 0.0 0.0 0.0006750110631678464 0.0 0.0 0.0 0.0 0.0 1.222930623856716e-5 0.0 0.0 -0.0001056928796678043 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 5.130472630583767e-5 0.0 0.0 0.0006750110631678464 0.0 0.0 0.0 0.0 0.0 1.222930623856716e-5 0.0 0.0 -0.0001056928796678043 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0012530820147576291 0.0 0.0 0.012515033927271366 0.0 0.0 0.0 0.0 0.0 -4.6993694556438e-5 0.0 0.0 -0.0008054356743439475 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0012530820147576291 0.0 0.0 0.012515033927271366 0.0 0.0 0.0 0.0 0.0 -4.6993694556438e-5 0.0 0.0 -0.0008054356743439475 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0012530820147576291 0.0 0.0 0.012515033927271366 0.0 0.0 0.0 0.0 0.0 -4.6993694556438e-5 0.0 0.0 -0.0008054356743439475 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0; 6.265410073788166e-5 0.0 0.0 0.0006257516963635682 0.0 0.0 0.0 0.0 0.0 -2.3496847278218997e-6 0.0 0.0 -4.0271783717197375e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0003373123032901824 -0.0009327131432708467 -0.022780865407867387 0.0 0.0 -0.00014225573527411025 -4.663565716354255e-5 -0.0011390432703933672 0.0 -5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0; 0.0 6.265410073788166e-5 0.0 0.0 0.0006257516963635682 0.0 0.0 0.0 0.0 0.0 -2.3496847278218997e-6 0.0 0.0 -4.0271783717197375e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.0003373123032901824 0.0009327131432708467 0.022780865407867387 0.0 0.0 0.00014225573527411025 4.663565716354255e-5 0.0011390432703933672 0.0 5.6952163519668535e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0; 0.0 0.0 6.265410073788166e-5 0.0 0.0 0.0006257516963635682 0.0 0.0 0.0 0.0 0.0 -2.3496847278218997e-6 0.0 0.0 -4.0271783717197375e-5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0]

# A = sparse(A)
AÃÇ = ‚Ñí.svd(A)

soll = AÃÇ \ b
Ainv = inv(AÃÇ)
A = sparse(A)

‚Ñí.cholesky(A)
using KLU
klu(A)

SparseArrays.lu(A)

lm = LinearMap{Float64}(x -> A * reshape(x, size(A)), length(A))

solli = (reshape(‚Ñê.bicgstabl(lm, vec(‚Ñí.diagm(ones(30)))), size(A)))

solli = reshape(‚Ñê.bicgstabl(A, vec(‚Ñí.diagm(ones(30)))))


invA, info = ‚Ñê.gmres(A, ‚Ñí.diagm(ones(30)))

using BenchmarkTools
lm = LinearMap{Float64}(x -> A * reshape(x, size(b)), length(b))

solli = (reshape(‚Ñê.gmres(lm, (b)), size(b)))

isapprox(soll,solli,rtol = 1e-5)
soll * b'
sum(abs,Matrix(A) * soll - b)
sum(abs,Matrix(A) * soll - b)
sum(abs,Matrix(A) * solli - b)

X = similar(b)

for j = 1:size(b, 2)
    X[:, j] = ‚Ñê.gmres(A, b[:, j])
end


A = sparse(A)
b = sparse(b)

findnz(A)|>print
findnz(b)|>print
‚Ñê.bicgstabl(A,b)

# Define matrices A and B
A = rand(30, 30)
B = rand(30, 148)

# Solve A\B using GMRES
X = ‚Ñê.gmres(A, B)

X = similar(B)

for j = 1:size(B, 2)
    X[:, j] = ‚Ñê.gmres(A, B[:, j])
end


sparse([1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 25, 26, 25, 26, 25, 26, 25, 26, 25, 26, 25, 26, 25, 26, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 19, 19, 20, 20, 21, 21, 24, 24, 25, 25, 26, 26, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 35, 36, 36, 38, 38, 39, 39, 40, 40, 41, 41, 44, 44, 45, 45, 46, 46, 48, 48, 49, 49, 50, 50, 51, 51, 54, 54, 55, 55, 56, 56, 58, 58, 59, 59, 60, 60, 61, 61, 64, 64, 65, 65, 66, 66, 68, 68, 69, 69, 70, 70, 71, 71, 74, 74, 75, 75, 76, 76, 78, 78, 79, 79, 80, 80, 81, 81, 84, 84, 85, 85, 86, 86, 88, 88, 89, 89, 90, 90, 91, 91, 94, 94, 95, 95, 96, 96, 98, 98, 99, 99, 100, 100, 101, 101, 104, 104, 105, 105, 106, 106, 108, 108, 109, 109, 110, 110, 111, 111, 114, 114, 115, 115, 116, 116, 118, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [-0.0003710833394972135, 0.0010260945261167489, 0.02506164029515263, 0.00015649809625454245, 5.130472630583767e-5, 0.0012530820147576291, 6.265410073788166e-5, -0.0003710833394972135, 0.0010260945261167489, 0.02506164029515263, 0.00015649809625454245, 5.130472630583767e-5, 0.0012530820147576291, 6.265410073788166e-5, -0.0003710833394972135, 0.0010260945261167489, 0.02506164029515263, 0.00015649809625454245, 5.130472630583767e-5, 0.0012530820147576291, 6.265410073788166e-5, -0.0003952301172749097, 0.013500221263356928, 0.25030067854542737, -0.00015649809625454245, 0.0006750110631678464, 0.012515033927271366, 0.0006257516963635682, -0.0003952301172749097, 0.013500221263356928, 0.25030067854542737, -0.00015649809625454245, 0.0006750110631678464, 0.012515033927271366, 0.0006257516963635682, -0.0003952301172749097, 0.013500221263356928, 0.25030067854542737, -0.00015649809625454245, 0.0006750110631678464, 0.012515033927271366, 0.0006257516963635682, 0.0003397392294234469, 0.00024458612477134303, -0.0009398738911287602, -0.00021915219699242413, 1.222930623856716e-5, -4.6993694556438e-5, -2.3496847278218997e-6, 0.0003397392294234469, 0.00024458612477134303, -0.0009398738911287602, -0.00021915219699242413, 1.222930623856716e-5, -4.6993694556438e-5, -2.3496847278218997e-6, 0.0003397392294234469, 0.00024458612477134303, -0.0009398738911287602, -0.00021915219699242413, 1.222930623856716e-5, -4.6993694556438e-5, -2.3496847278218997e-6, 0.00036184641344946355, -0.0021138575933560863, -0.01610871348687895, -0.0004692536001090257, -0.0001056928796678043, -0.0008054356743439475, -4.0271783717197375e-5, 0.00036184641344946355, -0.0021138575933560863, -0.01610871348687895, -0.0004692536001090257, -0.0001056928796678043, -0.0008054356743439475, -4.0271783717197375e-5, 0.00036184641344946355, -0.0021138575933560863, -0.01610871348687895, -0.0004692536001090257, -0.0001056928796678043, -0.0008054356743439475, -4.0271783717197375e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])


A = sparse([1, 2, 4, 5, 7, 8, 19, 20, 22, 23, 28, 29, 2, 4, 5, 7, 8, 19, 20, 22, 23, 28, 29, 5, 7, 8, 22, 23, 28, 29, 8, 16, 17, 17, 19, 20, 22, 23, 16, 17, 28, 29], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 7, 7, 7, 7, 7, 7, 8, 16, 16, 17, 19, 20, 22, 23, 28, 28, 28, 29], [0.1677860968109567, 0.8322139031890433, -1.0801285648555996, 1.0801285648555996, -1.4018964501149391, 1.4018964501149391, -0.05400642824277999, 0.05400642824277999, -0.07009482250574697, 0.07009482250574697, -0.0035047411252873495, 0.0035047411252873495, 1.0, 0.8260486345791883, 0.17395136542081166, -0.45154217675686387, 0.45154217675686387, -0.008697568271040582, 0.008697568271040582, -0.022577108837843196, 0.022577108837843196, -0.0011288554418921598, 0.0011288554418921598, 1.0, 0.9636402643409201, 0.036359735659079934, -0.0018179867829539963, 0.0018179867829539963, -9.089933914769982e-5, 9.089933914769982e-5, 1.0, 0.09100660852300191, 0.9089933914769981, 1.0, 1.0, 1.0, 1.0, 1.0, -0.9089933914769981, 0.9089933914769981, 1.0, 1.0],30,30)


b = sparse([1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 4, 7, 16, 19, 22, 28, 2, 5, 8, 17, 20, 23, 29, 3, 6, 9, 18, 21, 24, 30, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 25, 26, 25, 26, 25, 26, 25, 26, 25, 26, 25, 26, 25, 26, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 19, 19, 20, 20, 21, 21, 24, 24, 25, 25, 26, 26, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 35, 36, 36, 38, 38, 39, 39, 40, 40, 41, 41, 44, 44, 45, 45, 46, 46, 48, 48, 49, 49, 50, 50, 51, 51, 54, 54, 55, 55, 56, 56, 58, 58, 59, 59, 60, 60, 61, 61, 64, 64, 65, 65, 66, 66, 68, 68, 69, 69, 70, 70, 71, 71, 74, 74, 75, 75, 76, 76, 78, 78, 79, 79, 80, 80, 81, 81, 84, 84, 85, 85, 86, 86, 88, 88, 89, 89, 90, 90, 91, 91, 94, 94, 95, 95, 96, 96, 98, 98, 99, 99, 100, 100, 101, 101, 104, 104, 105, 105, 106, 106, 108, 108, 109, 109, 110, 110, 111, 111, 114, 114, 115, 115, 116, 116, 118, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [-0.0003710833394972135, 0.0010260945261167489, 0.02506164029515263, 0.00015649809625454245, 5.130472630583767e-5, 0.0012530820147576291, 6.265410073788166e-5, -0.0003710833394972135, 0.0010260945261167489, 0.02506164029515263, 0.00015649809625454245, 5.130472630583767e-5, 0.0012530820147576291, 6.265410073788166e-5, -0.0003710833394972135, 0.0010260945261167489, 0.02506164029515263, 0.00015649809625454245, 5.130472630583767e-5, 0.0012530820147576291, 6.265410073788166e-5, -0.0003952301172749097, 0.013500221263356928, 0.25030067854542737, -0.00015649809625454245, 0.0006750110631678464, 0.012515033927271366, 0.0006257516963635682, -0.0003952301172749097, 0.013500221263356928, 0.25030067854542737, -0.00015649809625454245, 0.0006750110631678464, 0.012515033927271366, 0.0006257516963635682, -0.0003952301172749097, 0.013500221263356928, 0.25030067854542737, -0.00015649809625454245, 0.0006750110631678464, 0.012515033927271366, 0.0006257516963635682, 0.0003397392294234469, 0.00024458612477134303, -0.0009398738911287602, -0.00021915219699242413, 1.222930623856716e-5, -4.6993694556438e-5, -2.3496847278218997e-6, 0.0003397392294234469, 0.00024458612477134303, -0.0009398738911287602, -0.00021915219699242413, 1.222930623856716e-5, -4.6993694556438e-5, -2.3496847278218997e-6, 0.0003397392294234469, 0.00024458612477134303, -0.0009398738911287602, -0.00021915219699242413, 1.222930623856716e-5, -4.6993694556438e-5, -2.3496847278218997e-6, 0.00036184641344946355, -0.0021138575933560863, -0.01610871348687895, -0.0004692536001090257, -0.0001056928796678043, -0.0008054356743439475, -4.0271783717197375e-5, 0.00036184641344946355, -0.0021138575933560863, -0.01610871348687895, -0.0004692536001090257, -0.0001056928796678043, -0.0008054356743439475, -4.0271783717197375e-5, 0.00036184641344946355, -0.0021138575933560863, -0.01610871348687895, -0.0004692536001090257, -0.0001056928796678043, -0.0008054356743439475, -4.0271783717197375e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 0.0003373123032901824, -0.0003373123032901824, -0.0009327131432708467, 0.0009327131432708467, -0.022780865407867387, 0.022780865407867387, -0.00014225573527411025, 0.00014225573527411025, -4.663565716354255e-5, 4.663565716354255e-5, -0.0011390432703933672, 0.0011390432703933672, -5.6952163519668535e-5, 5.6952163519668535e-5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],30,148)


b = vec(b)
‚Ñê.gmres(A,b)


‚Ñí.svd(A)

# Generate a random sparse matrix A with dimensions 30x30
A = sprand(30, 30, 0.2)

# Generate a random dense matrix B with dimensions 30x148
B = rand(30, 148)

# Solve A\B using gmres
X = ‚Ñê.gmres(A, B)

import Krylov

Krylov.gmres(A,Matrix(b))


covar_raw = calculate_covariance_forward(sol,T = ùìÇ.timings, subset_indices = collect(1:ùìÇ.timings.nVars))

return covar_raw, sol , ‚àá‚ÇÅ, SS_and_pars


stdev_deriv = ForwardDiff.jacobian(x -> get_moments(RBC, x)[2], Float64.(RBC.parameter_values))



a = sparse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 18, 18)


b = sparse([1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], [1.9105128802627431, 0.9136289125525903, 1.0140953364234968, 1.4095713044017735, -1.9369534683771081, 0.08756642215139436, 1.4095713044017733, 1.907596429400141, 0.7264906184727966, 2.9136479386723506, 1.4095713044017733, 1.9234954075555994, 0.7203416184877737, 0.3542751367575041, 0.9766944702952427, -0.9397757495793061, 0.05812718092629373, -1.4548733553306776, 0.9527817982540878, -0.05893163341912935, -1.4548733553306774, -0.9383411558511885, -0.7498392173657012, -1.9608661404182617, -1.4548733553306774, -0.9461618171343179, -0.743492595373467, -0.36566114485664336, -1.0080843421641739, 0.957485980844909, -0.02785836008891844, 1.000252320813247, -0.04468365049290956, -0.9707371306834368, 1.0282439065211162, -0.04468365049290924, 0.9560243519579156, -0.02302987637506773, 0.9397757495793063, -0.04468365049290924, 0.9639923949116576, -0.022834952027960456, -0.011230582191738302, -0.03096138110413047, -0.9269472413470902, 0.057333709697266734, -1.4350134527698308, 0.9397757495793063, -0.05812718092629406, -1.4350134527698308, -0.9255322306923378, -0.7396034578484756, -1.93409912984591, -1.4350134527698308, -0.9332461352117426, -0.7333434710907754, -0.36066964873738844, -0.9943233802666038, -0.9182538239574134, 0.056796002860605155, -1.4215551130194477, 0.9309620194344095, -0.05758203248317103, -1.4215551130194477, -0.9168520840452488, -0.7326670527596797, -1.9159600920897515, -1.4215551130194477, -0.9244936433558865, -0.7264657755760643, -0.3572870918275629, -0.984998072655342, -0.9332461352117426, 0.05772331002848412, -1.444764814044944, 0.9461618171343177, -0.05852217314049395, -1.4447648140449445, -0.9318215091209288, -0.7446292926264584, -1.9472419330165749, -1.4447648140449445, -0.9395878320129036, -0.7383267673181028, -0.36312051081050567, -1.0010801158822573, 0.04792410332951839, -0.0029642103727536436, 0.0741916367212523, -0.048587350089054376, 0.00300523363219357, 0.0741916367212523, 0.04785094585754383, 0.038238241569486804, 0.09999486746793144, 0.0741916367212523, 0.04824976246842748, 0.03791459396708231, 0.018646983067550346, 0.051407517378877075], 18, 18)


c = sparse([1, 2, 3, 7, 8, 10, 1, 2, 3, 4, 5, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 11, 12, 13, 14, 15, 21, 28, 1, 2, 3, 7, 8, 10, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 1, 2, 3, 7, 8, 10, 1, 2, 3, 4, 5, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 1, 2, 3, 4, 5, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 9], [3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 13, 13, 13, 13, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 20, 20, 20, 21, 21, 21, 21, 21, 21, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28], [0.0008787445147672051, -0.05722280818934752, 0.9315704741389814, -0.0008070300140303691, 0.026276422168131704, 0.0001852920367071645, -0.00427097274642013, 0.13859783688117852, 0.015059426875281253, -0.003824027650297666, 0.1245080891353924, 0.0019787553373906554, -0.00035891288668584863, 0.0017559740268135887, -8.057216659180804e-6, 0.02075826123989625, 0.004495997578322727, 0.0002434451757625252, 0.0371719370113054, 0.004025504276417646, 0.01664100000000003, -0.00017056194771000678, -1.8470865526645402e-5, -0.00015271312716251436, 3.503590410395145e-7, -0.02964362519610591, 0.9651789855456766, 0.013612201758244862, 0.1440772752376177, 0.015602729753556754, 0.12900000000000011, -0.0005919113455911404, 1.0, 1.0, 1.0, -0.0005913069328862276, 0.038505211279234924, -0.6268535058525159, 0.0005430502658327703, -0.017681396968466476, -0.0001246829585531785, 0.0028739363406386585, -0.09326244483311107, -0.010133484041156167, 0.0025731871131720978, -0.08378145760110704, -0.0013315039011021906, 0.00024151237889180827, -0.0011815944208744891, 5.421698787618624e-6, 0.019947186923814694, -0.6494686635744726, -0.009159646673445643, 0.0003978902661736039, -0.02591014566696025, 0.4218095449652115, -0.0003654183687026354, 0.011897806967634213, 8.389912718236385e-5, -0.00029346457636334, 0.009523253343000693, 0.001034754513929701, -0.0002627543468491881, 0.008555126853139767, 0.00013596307710012404, -2.4661411930330822e-5, 0.00012065545824796227, -5.536227491821616e-7, 0.0014263294810091605, 0.00030892635073800825, 1.6727462246798006e-5, 0.0025541363514367966, 0.00027659809070846545, 0.001143426639600001, -1.1719552593818112e-5, -1.2691592872808103e-6, -1.0493134896597567e-5, 0.009899753300142606, 0.0010720856229010094, 0.008863772399999999, -4.067106549069729e-5, 0.00019747222957759594, -0.006408194453242253, -0.0006962860167429246, 0.00017680732491294956, -0.005756742414856296, -9.14895157293174e-5, 1.659465704093889e-5, -8.11890233778393e-5, 3.7253258972735533e-7, 9.800511540368442e-5, 2.122676636669942e-5, 1.1493675828310453e-6, 0.00017549832013722587, 1.900544590941355e-5, 7.856646115900174e-5, -8.052670296236931e-7, -7.2099813555007e-7], 28, 28)


x = sparse([10, 14, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 11, 11, 11, 15, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 11, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18], [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 9, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-2.0105168181238766, -1.0136367962511457, -0.029799503503465823, -0.0001235226347811579, -9.20443298926852e-5, 0.0016715843917803467, -0.00010790171952762312, -0.0016686876750812364, 9.331817956943876e-5, -0.00010790171952762246, -0.0001233340740556692, 0.001068388193200129, 0.0031050294720625623, -0.00010790171952762246, 0.0007663657652945793, 0.0011601351169425876, 2.665509641856063e-5, 0.0014363417969813258, 1.1431087100083102, 0.003313379057896695, 5.6914863992418575e-5, -0.0005761020907298357, 0.0015388521973746048, 0.0014836006524963558, -5.770253859642454e-5, 0.0015388521973746022, 0.03290077598261002, -0.0003245826339691214, -0.0019199697613197157, 0.0015388521973746022, -0.0009933206357930335, -0.00032621810278804666, -0.00016334460148070175, -0.00043636910882335976, 0.12145388673963425, 0.01576266926083474, 0.014652708392022235, 0.304857604006584, -0.014733126659245865, -0.0013909307349287338, -0.01610391797473394, -0.16638865912358364, -0.00035809193311977177, 0.014251707626374333, 0.09623261471872735, 1.1429206609384894, -0.00035487047313186834, 0.11233653269346129, -0.00017467632347610898, -0.0004814190328715321, 0.007467572323737132, -0.00032471901760970753, -1.0971880165108558, -0.5439507211120403, -0.0007282508243985926, 7.617689062096593e-5, 0.0009928774332600664, -0.0026431260660841993, 0.0007383294688771474, -7.72311424972819e-5, -0.002643126066084197, -0.0007271391293312888, -0.0013622626144947092, -0.0025697562331537236, -0.002643126066084197, -0.0007331995145128927, -0.0013507324548709908, -0.0006643110891979396, -0.0018314267642765762, -0.015342808726717023, -0.0009677185239290251, -0.000952309060468904, -0.0011248086595749248, -0.0005319266019414345, 0.0021882394109797795, 0.0009654885641956643, -0.000531926601941435, -0.002015474012752255, -0.0007189181099132127, 0.03212525641411775, -0.000531926601941435, -0.0015736649363500698, -0.0004247675721319318, -0.0001698768972921012, -0.0004839750446270814, -0.002229571821262956, -3.829799571711531e-5, 0.00038765893223135204, -0.0010354932038874952, -0.0009983144551269443, 3.882802173307345e-5, -0.0010354932038874947, 0.018109636466517583, 0.00023401901100682357, 0.001291947103762001, -0.0010354932038874947, 0.0006684051719845062, 0.00021951206814946922, 0.00010991453566075342, 0.0002936326486350568, 0.021342956141857813, 0.0006511775182269556, 0.0006408084946678847, 0.0007568834256146898, 0.00035793325844873106, -0.0014724656743604243, -0.0006496769789595877, 0.0003579332584487314, -0.0012673584943203523, -0.001256631601, 0.0008159955978643548, -0.0005420782078937336, -0.021617075861290524, 0.0003579332584487314, 0.0010589186859963197, 0.0002858259779105406, 0.00011431011564564987, 0.00032566666923403387, 0.009951810252607031, 0.00022766696003195878, 3.910700779889499e-6, -3.958478923560808e-5, 0.00010573671034704198, 0.0001019402985753414, -3.9648230156660016e-6, 0.00010573671034704194, 0.00022731942010755906, -2.2302531724765175e-5, -0.0001319238370482171, 0.00010573671034704194, -6.82524653945156e-5, -2.241490709979047e-5, -1.1223638529407885e-5, -2.9983538472875712e-5, -0.001552505457366427, -0.00016196337100912516, -0.0001444484857190864, -0.0030811985114716205, 0.0001002002168427827, 1.5730203265884176e-5, 0.00018508148852838227, -0.01143280003420636, 5.6411385765634694e-6, -9.261626639139085e-5, -0.0009581165114716188, -0.0001172751677073753, 5.6064869961162225e-6, -0.001143198000000001, 2.7473565049677067e-6, 7.58395045139186e-6, -2.2311902837560637e-5, -0.00015319703234983182, -2.631509437307582e-6, 2.6636593365316002e-5, -7.115020217833838e-5, -6.859559778197781e-5, 2.6679282742961996e-6, -7.115020217833832e-5, 0.00019743746783084927, 1.6079777138275596e-5, 8.877151225259948e-5, -7.115020217833832e-5, 4.592706446087644e-5, 1.5082984582404053e-5, 7.552383159291255e-6, 2.0175914470621666e-5, -0.00010667484514615414, -1.1128732230710392e-5, -9.925259697198571e-6, -0.00021171350639459855, 6.884898577713861e-6, 1.0808445081746707e-6, 1.271721077340137e-5, -0.00010651200303848845, 3.8761060790308037e-7, -6.36379461884575e-6, -6.58335402353986e-5, -8.058142594806358e-6, 3.852296488148286e-7, -7.855075100879997e-5, 1.8877475009056488e-7, 5.211039588681101e-7], 18, 28)


s = sparse([10, 14, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 11, 11, 11, 15, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 10, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 11, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18], [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 9, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [2.010516818123878, 1.0136367962511466, 0.029799503503465847, 0.002319779310345583, 0.002169653717971218, -2.0573159739386074e-17, 0.0009561193186116402, -0.000557964146599155, -0.0005285179691843822, 0.0009561193186116331, 0.002316238102934425, -0.0006312183059913507, -0.0002906461634787408, 0.0009561193186116331, 0.001444815155234219, -0.0007266654256641422, 0.00018653199456236956, -0.0008486103100778977, -1.1431087100083108, -0.004290778220110249, -0.0005138270877312131, 1.252665114293564e-17, -0.0021724994191924776, -0.0004926747515005677, -5.501855500699102e-5, -0.002172499419192475, -0.03387668311791334, -1.998050977075124e-6, 0.000489988570439098, -0.002172499419192475, 9.279743272116422e-6, 2.401589292631713e-6, 4.0866374000472205e-6, -2.686181061470107e-6, -0.12314111086371797, -0.01778138584950714, -0.016476137923472713, -0.30468597964023264, 0.016443701161430766, 0.001614615841203758, 0.01627554234108563, 0.16470401059388787, 0.0004465468354482134, -0.01584336329908239, -0.09606099035237574, -1.1446193502735473, 0.0004425766951893434, -0.11233653269346137, 0.00021781159848510592, 0.000600337862348378, -0.0074675723237371365, 0.00032471901760970775, 1.0971880165108565, 0.5439507211120409, -0.01823085005408977, -0.016663729213211156, -7.910448238551949e-5, -0.02810254535656221, 0.01848315633385098, 0.017807889732196512, -0.028102545356562203, -0.018203020156204498, -0.014484003393793132, -0.03795546012243044, -0.028102545356562203, -0.018354734331889905, -0.014361411120215354, -0.0070631638628990195, -0.01947230378857948, 0.015342808726717035, -0.0005101419654794817, -0.0004457137030937252, 1.6074303058722468e-18, -3.8838778104620575e-5, -0.0006899260364352299, -0.0006726427501218019, -3.883877810461574e-5, 0.0005398695183405186, 0.000424746617731412, -0.03401905413825578, -3.883877810461574e-5, 8.576192676962707e-5, 0.00013308594073432357, 2.642336468909396e-5, 8.849069503362153e-5, 0.0028872634382253373, 0.000345754100508605, -1.9133256668612967e-17, 0.0014618742383844952, 0.0003315206995032533, 3.702196994269199e-5, 0.0014618742383844957, -0.017452948834036783, -1.4262961426728172e-5, -0.000329713169034549, 0.0014618742383844957, -6.244336596170719e-6, -1.6160287487445468e-6, -2.7498971387316316e-6, 1.8075304687063535e-6, -0.021342956141857824, 0.0003432743827984386, 0.0002999206234493907, -3.7484516638453e-18, 2.613460268845517e-5, 0.0004642510327713841, 0.00045262111434977005, 2.6134602688452114e-5, 0.001267358494320353, 0.0012566316010000007, 0.00017693824477236039, 0.0007400261209235718, 0.022891411808711643, 2.6134602688452114e-5, -5.7709176016873764e-5, -8.955349149091019e-5, -1.778027454883188e-5, -5.954536340196819e-5, -0.00995181025260704, -0.00029482543846460704, -3.530578572561473e-5, 1.0487169513875921e-18, -0.00014927550690584766, -3.3852378794786296e-5, -3.7804027082081413e-6, -0.00014927550690584768, -0.00029437537926154696, -1.372889077866705e-7, 3.3667807495916644e-5, -0.00014927550690584768, 6.376242813507134e-7, 1.6501659603166907e-7, 2.8079863407225196e-7, -1.8457129886964824e-7, 0.001436573902144208, 2.3254499830082693e-5, 1.915806436857777e-5, 0.003092991064352517, 1.7335775875125418e-5, -3.604833333910252e-7, -0.00017328893564748707, 0.011317045451716298, 4.367228335414403e-7, -1.6748645407469354e-5, 0.0009699090643525148, 5.558216278810403e-7, 4.1993153397149976e-7, 0.001143198000000002, 2.1652923217303347e-7, 5.871304676559637e-7, 2.231190283756065e-5, 0.00019838795329667306, 2.375725312616279e-5, -1.5914880539265123e-18, 0.00010044744594157843, 2.277925601771723e-5, 2.5438319021059507e-6, 0.00010044744594157835, -0.00015231553207732397, -9.800282467943362e-7, -2.2655058043447546e-5, 0.00010044744594157835, -4.290571967208636e-7, -1.1103962031523046e-7, -1.8894932062867807e-7, 1.2419797426974497e-7, 9.870902406500858e-5, 1.5978495641061142e-6, 1.3163776913768008e-6, 0.00021252378937716633, 1.1911656723605018e-6, -2.476931954395397e-8, -1.190692779083378e-5, 9.855834200400022e-5, 3.000784339857109e-8, -1.1508231077524741e-6, 6.664382321796624e-5, 3.819128995777019e-8, 2.8854089463002476e-8, 7.855075100880004e-5, 1.4878029704952531e-8, 4.034256460803574e-8], 18, 28)

# A * X + B * X * C

# A * S - B * S * C |> Matrix
# X + A * S - B * S * C |> Matrix
# S|>Matrix
# X|>Matrix



using ComponentArrays, ImplicitDifferentiation, LinearMaps
import IterativeSolvers as ‚Ñê


function solve_sylvester_equation_forward(ABCX)
    (; A, B, C, X) = ABCX

    lm = LinearMap{Float64}(x -> A * reshape(x, size(X)) - B * reshape(x, size(X)) * C, size(X)[1] * size(X)[2])

    sparse(reshape(‚Ñê.gmres(lm, vec(-X)), size(X)))
end


function solve_sylvester_equation_condition(ABCX, S)
    (; A, B, C, X) = ABCX

    X + A * S - B * S * C
end

using ForwardDiffChainRules, Zygote, ForwardDiff

diff_solve_sylvester_equation = ImplicitFunction(solve_sylvester_equation_forward, solve_sylvester_equation_condition)

@ForwardDiff_frule (f::typeof(diff_solve_sylvester_equation))(x::AbstractArray{<:ForwardDiff.Dual}; kwargs...)

comp_vec(A, B, C, X) = ComponentVector((; A, B, C, X))
using ChainRulesCore
function ChainRulesCore.rrule(::typeof(comp_vec), A, B, C, X)
    out = comp_vec(A, B, C, X)
    T = typeof(out)
    return out, Œî -> begin
        _Œî = convert(T, Œî)
        (NoTangent(), _Œî.A, _Œî.B, _Œî.C, _Œî.X) 
    end
end
Zygote.refresh()
function solve_sylvester_equation(A, B, C, X) 
    diff_solve_sylvester_equation(comp_vec(A, B, C, X))
end


# solve_sylvester_equation(A, B, C, X) = diff_solve_sylvester_equation(ComponentVector(; A, B, C, X))


# const _diff_gen_schur = ImplicitFunction(gen_schur_forward, gen_schur_conditions)


solve_sylvester_equation(a, b, c, x)


ForwardDiff.jacobian(diff_solve_sylvester_equation,ComponentVector(; A, B, C, X))


ForwardDiff.jacobian(xx->solve_sylvester_equation(xx, b, c, x),a)


ForwardDiff.jacobian(x->solve_sylvester_equation(x, B, C, X),A)


abcx = ComponentVector(; a, b, c, x)
f4(ABCX) = vec(solve_sylvester_equation(ABCX.a, ABCX.b, ABCX.c, ABCX.x))
zjac4 = Zygote.jacobian(f4, abcx)[1]
zjac4 = Zygote.jacobian(xx->solve_sylvester_equation(xx, b, c, x), a)[1]
zjac4 = Zygote.jacobian(xx->solve_sylvester_equation(a, xx, c, x), b)[1]
zjac4 = Zygote.jacobian(xx->solve_sylvester_equation(a, b, xx, x), c)[1]
zjac4 = Zygote.jacobian(xx->solve_sylvester_equation(a, b, c, xx), x)[1]
324*2+784+504

zjac4 = ForwardDiff.jacobian(xx->solve_sylvester_equation(xx, b, c, x), a)

zjac4 = ForwardDiff.jacobian(f4, abcx)


lm = LinearMap{Float64}(x -> A * reshape(x, size(X)) - B * reshape(x, size(X)) * C, size(X)[1] * size(X)[2])

sparse(reshape(‚Ñê.gmres(lm, vec(-X)), size(X)))


using ImplicitDifferentiation, LinearMaps
import IterativeSolvers as ‚Ñê
import ForwardDiff as ‚Ñ±

‚Ñ±.value.((A,B))




solve_sylvester_equation_forward((A,B,C,X))



function gen_schur_conditions(AB, left_right_S_T)
    (; left, right, S, T) = left_right_S_T
    (; A, B) = AB
    return vcat(
      vec(left * S * right' - A),
      vec(left * T * right' - B),
      vec(UpperTriangular(left' * left) - I + LowerTriangular(S) - bidiag(diag(S), diag(S, -1) .+ (diag(S, -1) .* diag(T, 1)))),
      vec(UpperTriangular(right' * right) - I + LowerTriangular(T) - Diagonal(T)),
    )
  end
  function gen_schur_forward(AB)
    (; A, B) = AB
    schur_res = schur(A, B)
    (; left, right, S, T) = schur_res
    return ComponentVector(; left, right, S, T)
  end
  const _diff_gen_schur = ImplicitFunction(gen_schur_forward, gen_schur_conditions)
  
  function diff_schur(A, B)
    (; left, right, S, T) = _diff_gen_schur(comp_vec(A, B))
    return (; left, right, S, T)
  end



S = solve_sylvester_equation_forward((A,B,C,X))
solve_sylvester_equation_condition((A,B,C,X),S)|>Matrix


solve_sylvester_equati = ImplicitFunction(solve_sylvester_equation_forward, solve_sylvester_equation_condition)

solve_sylvester_equati((A,B,C,X))

‚Ñ±.jacobian(A -> solve_sylvester_equati((A,B,C,X)),A)

‚Ñ±.jacobian(A -> solve_sylvester_equation_condition((A,B,C,X)),A)

‚Ñ±.jacobian(x -> solve_sylvester_equation_condition(x, S), (A,B,C,X))

‚Ñ±.jacobian(x -> solve_sylvester_equation_condition(x, S), (A,B,C,X))

‚Ñ±.jacobian(x -> solve_sylvester_equation_condition((A,B,C,X), x), S)

function solve_sylvester_equation(A::SparseMatrixCSC{‚Ñ±.Dual{Z,S,N}},
    B::SparseMatrixCSC{‚Ñ±.Dual{Z,S,N}},
    C::SparseMatrixCSC{‚Ñ±.Dual{Z,S,N}},
    X::SparseMatrixCSC{‚Ñ±.Dual{Z,S,N}}) where {Z,S,N}
    # unpack: AoS -> SoA
    ‚àáÃÇ‚ÇÅ = ‚Ñ±.value.(‚àá‚ÇÅ)
    # you can play with the dimension here, sometimes it makes sense to transpose
    ps = mapreduce(‚Ñ±.partials, hcat, ‚àá‚ÇÅ)'

    # get f(vs)
    val = riccati_forward(‚àáÃÇ‚ÇÅ;T = T, explosive = explosive)

    # get J(f, vs) * ps (cheating). Write your custom rule here
    B = ‚Ñ±.jacobian(x -> riccati_conditions(x, val; T = T), ‚àáÃÇ‚ÇÅ)
    A = ‚Ñ±.jacobian(x -> riccati_conditions(‚àáÃÇ‚ÇÅ, x; T = T), val)
    # B = Zygote.jacobian(x -> riccati_conditions(x, val; T = T), ‚àáÃÇ‚ÇÅ)[1]
    # A = Zygote.jacobian(x -> riccati_conditions(‚àáÃÇ‚ÇÅ, x; T = T), val)[1]

    jvp = (-A \ B) * ps

    # pack: SoA -> AoS
    return reshape(map(val, eachrow(jvp)) do v, p
        ‚Ñ±.Dual{Z}(v, p...) # Z is the tag
    end,size(val))
end


solve_sylvester_equation = ImplicitFunction((A,B,C,X) -> solve_sylvester_equation_forward(A,B,C,X), (A,B,C,X,S) -> solve_sylvester_equation_condition(A,B,C,X,S))

solve_sylvester_equation(A,B,C,X)